-- ====================================================================================
--      GESTOR APP v2.0 - SCRIPT MESTRE DE CRIAÇÃO DO BANCO DE DADOS (VERSÃO COMPLETA)
--      ----------------------------------------------------------------------------
--      - Script 100% completo e pronto para execução.
--      - Políticas de Segurança (RLS) aplicadas a todas as tabelas.
--      - Funcionalidade de Auditoria removida temporariamente.
--      - Inclui Controle de Estoque, Categorias, melhorias em Merchants e Aportes/Retiradas.
-- ====================================================================================

BEGIN;

-- ====================================================================================
-- SEÇÃO 0: LIMPEZA TOTAL DO AMBIENTE
-- ====================================================================================
-- Funções e Triggers
DROP FUNCTION IF EXISTS public.trigger_set_timestamp() CASCADE;
DROP FUNCTION IF EXISTS public.update_stock_on_change() CASCADE;
DROP FUNCTION IF EXISTS public.set_sale_display_id() CASCADE;
DROP FUNCTION IF EXISTS public.get_user_role(p_user_id UUID) CASCADE;
DROP FUNCTION IF EXISTS public.get_salesperson_id_from_user() CASCADE;

-- Views
DROP VIEW IF EXISTS public.purchases_with_status_view CASCADE;
DROP VIEW IF EXISTS public.sales_with_status_view CASCADE;

-- Tabelas (ordem inversa de dependência)
DROP TABLE IF EXISTS public.commission_payments;
DROP TABLE IF EXISTS public.purchase_payments;
DROP TABLE IF EXISTS public.sale_payments;
DROP TABLE IF EXISTS public.partner_transactions;
DROP TABLE IF EXISTS public.sale_items;
DROP TABLE IF EXISTS public.purchase_items;
DROP TABLE IF EXISTS public.sales;
DROP TABLE IF EXISTS public.purchase_headers;
DROP TABLE IF EXISTS public.product_stock;
DROP TABLE IF EXISTS public.products;
DROP TABLE IF EXISTS public.product_categories;
DROP TABLE IF EXISTS public.merchants;
DROP TABLE IF EXISTS public.cost_centers;
DROP TABLE IF EXISTS public.salespeople;
DROP TABLE IF EXISTS public.partners;
DROP TABLE IF EXISTS public.user_profiles;
DROP TABLE IF EXISTS public.permissions;


-- ====================================================================================
-- SEÇÃO 1: CRIAÇÃO DAS TABELAS
-- ====================================================================================

-- Tabela de Níveis de Permissão (Roles)
CREATE TABLE public.permissions (
    permission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Perfil de Usuário (liga auth.users com permissions)
CREATE TABLE public.user_profiles (
    user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT,
    permission_id UUID NOT NULL REFERENCES public.permissions(permission_id) ON DELETE RESTRICT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Sócios
CREATE TABLE public.partners (
    partner_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    cpf_cnpj TEXT UNIQUE,
    equity_percentage NUMERIC(5, 2) CHECK (equity_percentage >= 0 AND equity_percentage <= 100),
    status TEXT NOT NULL DEFAULT 'Ativo' CHECK (status IN ('Ativo', 'Inativo')),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Vendedores (com vínculo ao usuário de autenticação)
CREATE TABLE public.salespeople (
    salesperson_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID UNIQUE REFERENCES auth.users(id) ON DELETE SET NULL, -- VÍNCULO CHAVE PARA RLS
    name TEXT NOT NULL,
    email TEXT UNIQUE,
    phone TEXT,
    is_active BOOLEAN DEFAULT true NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Centros de Custo
CREATE TABLE public.cost_centers (
    cost_center_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    is_active BOOLEAN DEFAULT true NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Categorias de Produtos
CREATE TABLE public.product_categories (
    category_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Produtos
CREATE TABLE public.products (
    product_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    category_id UUID REFERENCES public.product_categories(category_id) ON DELETE SET NULL,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    unit_of_measure TEXT,
    sale_price NUMERIC(10, 2) CHECK (sale_price IS NULL OR sale_price >= 0),
    is_active BOOLEAN DEFAULT true NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Controle de Estoque
CREATE TABLE public.product_stock (
    product_id UUID PRIMARY KEY REFERENCES public.products(product_id) ON DELETE CASCADE,
    quantity NUMERIC(10, 3) NOT NULL DEFAULT 0,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Comerciantes (Clientes/Fornecedores)
CREATE TABLE public.merchants (
    merchant_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    nickname TEXT,
    entity_type TEXT NOT NULL CHECK (entity_type IN ('Pessoa Física', 'Pessoa Jurídica')),
    document TEXT UNIQUE, -- Para CPF/CNPJ
    phone TEXT,
    email TEXT,
    merchant_type TEXT NOT NULL CHECK (merchant_type IN ('Cliente', 'Fornecedor', 'Ambos')),
    address_street TEXT,
    address_city TEXT,
    address_state TEXT,
    status TEXT NOT NULL DEFAULT 'Ativo' CHECK (status IN ('Ativo', 'Inativo')),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Cabeçalho de Compras
CREATE TABLE public.purchase_headers (
    purchase_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    supplier_id UUID NOT NULL REFERENCES public.merchants(merchant_id) ON DELETE RESTRICT,
    cost_center_id UUID NOT NULL REFERENCES public.cost_centers(cost_center_id) ON DELETE RESTRICT,
    purchase_date DATE NOT NULL DEFAULT current_date,
    total_amount NUMERIC(12, 2) NOT NULL CHECK (total_amount >= 0),
    observations TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Itens de Compra
CREATE TABLE public.purchase_items (
    item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    purchase_id UUID NOT NULL REFERENCES public.purchase_headers(purchase_id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES public.products(product_id) ON DELETE RESTRICT,
    product_name_at_purchase TEXT NOT NULL,
    unit_price NUMERIC(10, 2) NOT NULL CHECK (unit_price >= 0),
    quantity NUMERIC(10, 3) NOT NULL CHECK (quantity > 0),
    item_total_amount NUMERIC(12, 2) GENERATED ALWAYS AS (unit_price * quantity) STORED,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Cabeçalho de Vendas
CREATE TABLE public.sales (
    sale_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sale_display_id TEXT,
    sale_year INTEGER,
    sale_number_in_year INTEGER,
    customer_id UUID NOT NULL REFERENCES public.merchants(merchant_id) ON DELETE RESTRICT,
    salesperson_id UUID REFERENCES public.salespeople(salesperson_id) ON DELETE SET NULL,
    cost_center_id UUID NOT NULL REFERENCES public.cost_centers(cost_center_id) ON DELETE RESTRICT,
    sale_date DATE NOT NULL DEFAULT CURRENT_DATE,
    overall_total_amount NUMERIC(12, 2) NOT NULL DEFAULT 0 CHECK (overall_total_amount >= 0),
    commission_percentage NUMERIC(5, 2),
    commission_value NUMERIC(10, 2),
    observations TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    CONSTRAINT unique_sale_year_number UNIQUE (sale_year, sale_number_in_year)
);

-- Tabela de Itens de Venda
CREATE TABLE public.sale_items (
    sale_item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sale_id UUID NOT NULL REFERENCES public.sales(sale_id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES public.products(product_id) ON DELETE RESTRICT,
    product_name_at_sale TEXT NOT NULL,
    unit_price_at_sale NUMERIC(10, 2) NOT NULL CHECK (unit_price_at_sale >= 0),
    quantity NUMERIC(10, 3) NOT NULL CHECK (quantity > 0),
    item_total_amount NUMERIC(12, 2) GENERATED ALWAYS AS (unit_price_at_sale * quantity) STORED,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Transações dos Sócios (Aportes e Retiradas)
CREATE TABLE public.partner_transactions (
    transaction_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    partner_id UUID NOT NULL REFERENCES public.partners(partner_id) ON DELETE RESTRICT,
    transaction_type TEXT NOT NULL CHECK (transaction_type IN ('Aporte', 'Retirada')),
    transaction_date DATE NOT NULL DEFAULT current_date,
    amount NUMERIC(12, 2) NOT NULL CHECK (amount > 0),
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Pagamentos de Vendas
CREATE TABLE public.sale_payments (
    payment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sale_id UUID NOT NULL REFERENCES public.sales(sale_id) ON DELETE CASCADE,
    payment_date DATE NOT NULL DEFAULT current_date,
    amount NUMERIC(12, 2) NOT NULL CHECK (amount > 0),
    payment_method TEXT,
    observations TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Pagamentos de Compras
CREATE TABLE public.purchase_payments (
    payment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    purchase_id UUID NOT NULL REFERENCES public.purchase_headers(purchase_id) ON DELETE CASCADE,
    payment_date DATE NOT NULL DEFAULT current_date,
    amount NUMERIC(12, 2) NOT NULL CHECK (amount > 0),
    payment_method TEXT,
    observations TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela de Pagamentos de Comissão
CREATE TABLE public.commission_payments (
    payment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    salesperson_id UUID NOT NULL REFERENCES public.salespeople(salesperson_id) ON DELETE RESTRICT,
    payment_date DATE NOT NULL DEFAULT current_date,
    amount NUMERIC(12, 2) NOT NULL CHECK (amount > 0),
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    observations TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    CONSTRAINT chk_period_dates CHECK (period_end >= period_start)
);


-- ====================================================================================
-- SEÇÃO 2: ÍNDICES PARA OTIMIZAÇÃO DE PERFORMANCE
-- ====================================================================================
CREATE INDEX ON public.products (category_id);
CREATE INDEX ON public.merchants (merchant_type);
CREATE INDEX ON public.purchase_headers (supplier_id);
CREATE INDEX ON public.purchase_headers (cost_center_id);
CREATE INDEX ON public.purchase_headers (purchase_date);
CREATE INDEX ON public.sales (customer_id);
CREATE INDEX ON public.sales (salesperson_id);
CREATE INDEX ON public.sales (cost_center_id);
CREATE INDEX ON public.sales (sale_date);
CREATE INDEX ON public.sale_items (product_id);
CREATE INDEX ON public.purchase_items (product_id);
CREATE INDEX ON public.partner_transactions (partner_id);


-- ====================================================================================
-- SEÇÃO 3: FUNÇÕES E TRIGGERS
-- ====================================================================================

-- Função para atualizar `updated_at` automaticamente
CREATE OR REPLACE FUNCTION public.trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Função para gerar ID de Venda sequencial (Ex: "1/2025")
CREATE OR REPLACE FUNCTION public.set_sale_display_id()
RETURNS TRIGGER AS $$
DECLARE
    next_number INTEGER;
BEGIN
    NEW.sale_year := EXTRACT(YEAR FROM NEW.sale_date);
    SELECT COALESCE(MAX(sale_number_in_year), 0) + 1 INTO next_number
    FROM sales WHERE sale_year = NEW.sale_year;
    NEW.sale_number_in_year := next_number;
    NEW.sale_display_id := next_number::TEXT || '/' || NEW.sale_year::TEXT;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Função para atualizar o estoque em compras/vendas
CREATE OR REPLACE FUNCTION public.update_stock_on_change()
RETURNS TRIGGER AS $$
BEGIN
    -- Se um produto novo é adicionado ao sistema, cria seu registro de estoque
    IF TG_TABLE_NAME = 'products' AND TG_OP = 'INSERT' THEN
        INSERT INTO public.product_stock (product_id, quantity) VALUES (NEW.product_id, 0);
        RETURN NULL;
    END IF;

    -- Lógica para itens de compra
    IF TG_TABLE_NAME = 'purchase_items' THEN
        IF TG_OP = 'INSERT' THEN
            UPDATE public.product_stock SET quantity = quantity + NEW.quantity, updated_at = now() WHERE product_id = NEW.product_id;
        ELSIF TG_OP = 'DELETE' THEN
            UPDATE public.product_stock SET quantity = quantity - OLD.quantity, updated_at = now() WHERE product_id = OLD.product_id;
        ELSIF TG_OP = 'UPDATE' THEN
            UPDATE public.product_stock SET quantity = quantity - OLD.quantity + NEW.quantity, updated_at = now() WHERE product_id = NEW.product_id;
        END IF;
    END IF;

    -- Lógica para itens de venda
    IF TG_TABLE_NAME = 'sale_items' THEN
        IF TG_OP = 'INSERT' THEN
            UPDATE public.product_stock SET quantity = quantity - NEW.quantity, updated_at = now() WHERE product_id = NEW.product_id;
        ELSIF TG_OP = 'DELETE' THEN
            UPDATE public.product_stock SET quantity = quantity + OLD.quantity, updated_at = now() WHERE product_id = OLD.product_id;
        ELSIF TG_OP = 'UPDATE' THEN
            UPDATE public.product_stock SET quantity = quantity + OLD.quantity - NEW.quantity, updated_at = now() WHERE product_id = NEW.product_id;
        END IF;
    END IF;

    RETURN NULL; -- O resultado não importa para um trigger AFTER
END;
$$ LANGUAGE plpgsql;

-- Função auxiliar para RLS, obtém a permissão (role) do usuário logado
CREATE OR REPLACE FUNCTION public.get_user_role(p_user_id UUID)
RETURNS TEXT AS $$
DECLARE
    role_name TEXT;
BEGIN
    SELECT p.name INTO role_name
    FROM public.user_profiles up
    JOIN public.permissions p ON up.permission_id = p.permission_id
    WHERE up.user_id = p_user_id;
    RETURN role_name;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Função auxiliar para RLS, obtém o ID de vendedor do usuário logado
CREATE OR REPLACE FUNCTION public.get_salesperson_id_from_user()
RETURNS UUID AS $$
DECLARE
    v_salesperson_id UUID;
BEGIN
    SELECT salesperson_id INTO v_salesperson_id
    FROM public.salespeople
    WHERE user_id = auth.uid();
    RETURN v_salesperson_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- ====================================================================================
-- SEÇÃO 4: APLICAÇÃO DOS TRIGGERS
-- ====================================================================================
-- Triggers de `updated_at`
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.user_profiles FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.partners FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.salespeople FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.cost_centers FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.product_categories FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.products FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.merchants FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.purchase_headers FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.purchase_items FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.sales FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.sale_items FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.partner_transactions FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.sale_payments FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.purchase_payments FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.commission_payments FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();

-- Trigger de ID de venda
CREATE TRIGGER trigger_set_sale_display_id BEFORE INSERT ON public.sales FOR EACH ROW EXECUTE FUNCTION public.set_sale_display_id();

-- Triggers de Estoque
CREATE TRIGGER on_product_insert AFTER INSERT ON public.products FOR EACH ROW EXECUTE FUNCTION public.update_stock_on_change();
CREATE TRIGGER on_purchase_change AFTER INSERT OR UPDATE OR DELETE ON public.purchase_items FOR EACH ROW EXECUTE FUNCTION public.update_stock_on_change();
CREATE TRIGGER on_sale_change AFTER INSERT OR UPDATE OR DELETE ON public.sale_items FOR EACH ROW EXECUTE FUNCTION public.update_stock_on_change();


-- ====================================================================================
-- SEÇÃO 5: CRIAÇÃO DE VIEWS
-- ====================================================================================
CREATE OR REPLACE VIEW public.purchases_with_status_view AS
 SELECT ph.purchase_id,
    ph.supplier_id,
    ph.cost_center_id,
    ph.purchase_date,
    ph.total_amount,
    ph.observations,
    ph.created_at,
    ph.updated_at,
    m.name AS supplier_name,
    cc.name AS cost_center_name,
    COALESCE(pp.total_paid, (0)::numeric) AS total_paid,
    (ph.total_amount - COALESCE(pp.total_paid, (0)::numeric)) AS balance
   FROM ((public.purchase_headers ph
     JOIN public.merchants m ON ((ph.supplier_id = m.merchant_id)))
     JOIN public.cost_centers cc ON ((ph.cost_center_id = cc.cost_center_id)))
     LEFT JOIN ( SELECT purchase_payments.purchase_id,
            sum(purchase_payments.amount) AS total_paid
           FROM public.purchase_payments
          GROUP BY purchase_payments.purchase_id) pp ON ((ph.purchase_id = pp.purchase_id));

CREATE OR REPLACE VIEW public.sales_with_status_view AS
 SELECT s.sale_id,
    s.sale_display_id,
    s.customer_id,
    s.salesperson_id,
    s.cost_center_id,
    s.sale_date,
    s.overall_total_amount,
    s.commission_percentage,
    s.commission_value,
    s.observations,
    s.created_at,
    s.updated_at,
    c.name AS customer_name,
    sp.name AS salesperson_name,
    cc.name AS cost_center_name,
    COALESCE(p.total_paid, (0)::numeric) AS total_paid,
    (s.overall_total_amount - COALESCE(p.total_paid, (0)::numeric)) AS balance
   FROM ((((public.sales s
     JOIN public.merchants c ON ((s.customer_id = c.merchant_id)))
     LEFT JOIN public.salespeople sp ON ((s.salesperson_id = sp.salesperson_id)))
     JOIN public.cost_centers cc ON ((s.cost_center_id = cc.cost_center_id)))
     LEFT JOIN ( SELECT sale_payments.sale_id,
            sum(sale_payments.amount) AS total_paid
           FROM public.sale_payments
          GROUP BY sale_payments.sale_id) p ON ((s.sale_id = p.sale_id)));

-- Importante para RLS funcionar corretamente nas views
ALTER VIEW public.purchases_with_status_view SET (security_invoker = true);
ALTER VIEW public.sales_with_status_view SET (security_invoker = true);


-- ====================================================================================
-- SEÇÃO 6: POLÍTICAS DE SEGURANÇA (RLS)
-- ====================================================================================

-- Função genérica para criar políticas de acesso padrão
CREATE OR REPLACE FUNCTION create_default_policies(p_table_name TEXT) RETURNS void AS $$
BEGIN
    EXECUTE format('ALTER TABLE public.%I ENABLE ROW LEVEL SECURITY;', p_table_name);
    -- Leitura: Todos os perfis podem ler
    EXECUTE format('CREATE POLICY "Permitir leitura para todos autenticados" ON public.%I FOR SELECT USING (true);', p_table_name);
    -- Escrita: Apenas Admins e Editores podem escrever
    EXECUTE format('CREATE POLICY "Permitir escrita para Admins e Editores" ON public.%I FOR ALL USING (public.get_user_role(auth.uid()) IN (''Administrador'', ''Editor'')) WITH CHECK (public.get_user_role(auth.uid()) IN (''Administrador'', ''Editor''));', p_table_name);
END;
$$ LANGUAGE plpgsql;

-- Aplicar políticas padrão para a maioria das tabelas
SELECT create_default_policies('partners');
SELECT create_default_policies('cost_centers');
SELECT create_default_policies('product_categories');
SELECT create_default_policies('products');
SELECT create_default_policies('merchants');
SELECT create_default_policies('purchase_headers');
SELECT create_default_policies('purchase_items');
SELECT create_default_policies('partner_transactions');
SELECT create_default_policies('purchase_payments');
SELECT create_default_policies('commission_payments');
SELECT create_default_policies('product_stock');

-- Limpar a função auxiliar
DROP FUNCTION create_default_policies(TEXT);

-- Políticas Específicas: Vendas (Sales)
ALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Default policies" ON public.sales;
CREATE POLICY "Permitir que Admins e Editores vejam todas as vendas" ON public.sales FOR SELECT
    USING (get_user_role(auth.uid()) IN ('Administrador', 'Editor'));
CREATE POLICY "Permitir que Vendedores vejam apenas suas próprias vendas" ON public.sales FOR SELECT
    USING (get_user_role(auth.uid()) = 'Vendedor' AND salesperson_id = get_salesperson_id_from_user());
CREATE POLICY "Permitir escrita para Admins, Editores e Vendedores" ON public.sales FOR ALL
    USING (get_user_role(auth.uid()) IN ('Administrador', 'Editor', 'Vendedor'))
    WITH CHECK (
        (get_user_role(auth.uid()) IN ('Administrador', 'Editor')) OR
        (get_user_role(auth.uid()) = 'Vendedor' AND salesperson_id = get_salesperson_id_from_user())
    );

-- Políticas Específicas: Itens de Venda (Sale Items)
ALTER TABLE public.sale_items ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Default policies" ON public.sale_items;
CREATE POLICY "Permitir acesso a itens de vendas visíveis" ON public.sale_items FOR ALL
    USING (
        (SELECT count(*) FROM public.sales s WHERE s.sale_id = sale_items.sale_id) > 0
    );

-- Políticas Específicas: Pagamentos de Venda (Sale Payments)
ALTER TABLE public.sale_payments ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Default policies" ON public.sale_payments;
CREATE POLICY "Permitir acesso a pagamentos de vendas visíveis" ON public.sale_payments FOR ALL
    USING (
        (SELECT count(*) FROM public.sales s WHERE s.sale_id = sale_payments.sale_id) > 0
    );

-- Políticas Específicas: Vendedores (Salespeople) e Perfis de Usuário (User Profiles)
ALTER TABLE public.salespeople ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;
-- Acesso total para Admins
CREATE POLICY "Admin total access" ON public.salespeople FOR ALL USING (get_user_role(auth.uid()) = 'Administrador');
CREATE POLICY "Admin total access" ON public.user_profiles FOR ALL USING (get_user_role(auth.uid()) = 'Administrador');
CREATE POLICY "Admin total access" ON public.permissions FOR ALL USING (get_user_role(auth.uid()) = 'Administrador');
-- Permitir que usuários vejam seus próprios perfis/registros de vendedor
CREATE POLICY "Allow user to see own profile" ON public.user_profiles FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "Allow salesperson to see own record" ON public.salespeople FOR SELECT USING (user_id = auth.uid());
-- Permitir leitura de permissões para todos
CREATE POLICY "Allow all to read permissions" ON public.permissions FOR SELECT USING (true);


-- ====================================================================================
-- SEÇÃO 7: DADOS INICIAIS (SEED)
-- ====================================================================================
INSERT INTO public.permissions (name, description) VALUES
('Administrador', 'Acesso total e irrestrito a todas as funcionalidades do sistema.'),
('Editor', 'Pode criar, visualizar e editar a maioria dos registros, mas não pode apagar.'),
('Vendedor', 'Acesso focado em vendas, clientes e relatórios próprios.'),
('Visualizador', 'Pode apenas visualizar dados, sem poder de edição.')
ON CONFLICT (name) DO NOTHING;

INSERT INTO public.product_categories (name, description) VALUES
('Matéria-Prima', 'Insumos básicos para produção ou operação.'),
('Produto Acabado', 'Itens prontos para venda direta ao consumidor.'),
('Serviços', 'Serviços prestados pela empresa, como mão de obra ou consultoria.')
ON CONFLICT (name) DO NOTHING;

COMMIT;
